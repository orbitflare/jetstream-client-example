// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: jetstream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Jetstream_Subscribe_FullMethodName       = "/jetstream.Jetstream/Subscribe"
	Jetstream_SubscribeParsed_FullMethodName = "/jetstream.Jetstream/SubscribeParsed"
	Jetstream_Ping_FullMethodName            = "/jetstream.Jetstream/Ping"
	Jetstream_GetVersion_FullMethodName      = "/jetstream.Jetstream/GetVersion"
)

// JetstreamClient is the client API for Jetstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JetstreamClient interface {
	// Subscribe to data streams with filtering support
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Jetstream_SubscribeClient, error)
	// Subscribe to data streams with filtering support and parsed instructions
	SubscribeParsed(ctx context.Context, opts ...grpc.CallOption) (Jetstream_SubscribeParsedClient, error)
	// Basic ping/pong for connection testing
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error)
	// Get information about current state
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
}

type jetstreamClient struct {
	cc grpc.ClientConnInterface
}

func NewJetstreamClient(cc grpc.ClientConnInterface) JetstreamClient {
	return &jetstreamClient{cc}
}

func (c *jetstreamClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Jetstream_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Jetstream_ServiceDesc.Streams[0], Jetstream_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &jetstreamSubscribeClient{stream}
	return x, nil
}

type Jetstream_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*SubscribeUpdate, error)
	grpc.ClientStream
}

type jetstreamSubscribeClient struct {
	grpc.ClientStream
}

func (x *jetstreamSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jetstreamSubscribeClient) Recv() (*SubscribeUpdate, error) {
	m := new(SubscribeUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jetstreamClient) SubscribeParsed(ctx context.Context, opts ...grpc.CallOption) (Jetstream_SubscribeParsedClient, error) {
	stream, err := c.cc.NewStream(ctx, &Jetstream_ServiceDesc.Streams[1], Jetstream_SubscribeParsed_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &jetstreamSubscribeParsedClient{stream}
	return x, nil
}

type Jetstream_SubscribeParsedClient interface {
	Send(*SubscribeParsedRequest) error
	Recv() (*SubscribeUpdateParsedTransaction, error)
	grpc.ClientStream
}

type jetstreamSubscribeParsedClient struct {
	grpc.ClientStream
}

func (x *jetstreamSubscribeParsedClient) Send(m *SubscribeParsedRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jetstreamSubscribeParsedClient) Recv() (*SubscribeUpdateParsedTransaction, error) {
	m := new(SubscribeUpdateParsedTransaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jetstreamClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PongResponse, error) {
	out := new(PongResponse)
	err := c.cc.Invoke(ctx, Jetstream_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jetstreamClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, Jetstream_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JetstreamServer is the server API for Jetstream service.
// All implementations must embed UnimplementedJetstreamServer
// for forward compatibility
type JetstreamServer interface {
	// Subscribe to data streams with filtering support
	Subscribe(Jetstream_SubscribeServer) error
	// Subscribe to data streams with filtering support and parsed instructions
	SubscribeParsed(Jetstream_SubscribeParsedServer) error
	// Basic ping/pong for connection testing
	Ping(context.Context, *PingRequest) (*PongResponse, error)
	// Get information about current state
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	mustEmbedUnimplementedJetstreamServer()
}

// UnimplementedJetstreamServer must be embedded to have forward compatible implementations.
type UnimplementedJetstreamServer struct {
}

func (UnimplementedJetstreamServer) Subscribe(Jetstream_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedJetstreamServer) SubscribeParsed(Jetstream_SubscribeParsedServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeParsed not implemented")
}
func (UnimplementedJetstreamServer) Ping(context.Context, *PingRequest) (*PongResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedJetstreamServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedJetstreamServer) mustEmbedUnimplementedJetstreamServer() {}

// UnsafeJetstreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JetstreamServer will
// result in compilation errors.
type UnsafeJetstreamServer interface {
	mustEmbedUnimplementedJetstreamServer()
}

func RegisterJetstreamServer(s grpc.ServiceRegistrar, srv JetstreamServer) {
	s.RegisterService(&Jetstream_ServiceDesc, srv)
}

func _Jetstream_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JetstreamServer).Subscribe(&jetstreamSubscribeServer{stream})
}

type Jetstream_SubscribeServer interface {
	Send(*SubscribeUpdate) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type jetstreamSubscribeServer struct {
	grpc.ServerStream
}

func (x *jetstreamSubscribeServer) Send(m *SubscribeUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jetstreamSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Jetstream_SubscribeParsed_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JetstreamServer).SubscribeParsed(&jetstreamSubscribeParsedServer{stream})
}

type Jetstream_SubscribeParsedServer interface {
	Send(*SubscribeUpdateParsedTransaction) error
	Recv() (*SubscribeParsedRequest, error)
	grpc.ServerStream
}

type jetstreamSubscribeParsedServer struct {
	grpc.ServerStream
}

func (x *jetstreamSubscribeParsedServer) Send(m *SubscribeUpdateParsedTransaction) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jetstreamSubscribeParsedServer) Recv() (*SubscribeParsedRequest, error) {
	m := new(SubscribeParsedRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Jetstream_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JetstreamServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jetstream_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JetstreamServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jetstream_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JetstreamServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Jetstream_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JetstreamServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jetstream_ServiceDesc is the grpc.ServiceDesc for Jetstream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jetstream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jetstream.Jetstream",
	HandlerType: (*JetstreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Jetstream_Ping_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _Jetstream_GetVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Jetstream_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeParsed",
			Handler:       _Jetstream_SubscribeParsed_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "jetstream.proto",
}
